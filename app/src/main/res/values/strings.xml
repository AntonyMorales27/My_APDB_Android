<resources>
    <string name="app_name">MYAPDB</string>
    <string name="title_activity_menu2">Menu2Activity</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">Slideshow</string>
    <string name="menu_foro">Foro</string>
    <string name="menu_MONGODB">MONGO DB</string>
    <string name="menu_PostgreSQL">PostgreSQL</string>
    <string name="menu_MySQL">MySQL</string>
    <string name="menu_SQLServer">SQLServer</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    // SQL
    <string name="sql_title_basededatos">BASE DE DATOS</string>
    <string name="sql_detail_basededatos">Creacion de Base de Datos\n
    Colocar el nombre distintivo, no colocar “DBVENTAS” si hacemos esto es redundante, lo Correcto es “VENTAS” debido al entorno se entiende que será(es) una base de datos.</string>
    <string name="sql_title_tablas">TABLAS</string>
    <string name="sql_detail_tablas">Creación de Tablas\n
    Podemos utilizar la nomenclatura under_score la cual se refiere que esta nomenclatura los objetos se pueden nombrar haciendo uso de palabras separadas por un guion medio.
    Ejemplo: “correo_clientes”, “detalle_ventas”\n\n

        Podemos utilizar el CamelCase el cual se refiere donde se delimitan por medio de una mayúscula.\n\n
        Ejemplo: “CorreoClientes”, “DetalleVentas”</string>

    <string name="sql_title_Campos">CAMPOS</string>
    <string name="sql_detail_Campos">Nombrando Campos\n
    Se aplica mismo criterio de nomenclatura que se expuso para nombrar tablas. Se usa nombres con significado y en la extensión que consideremos necesaria.\n\n
    Ejemplo: tabla “detalle_ventas”\n
    codigo_venta\n
    cantidad_venta\n
    direccion_venta</string>

    <string name="sql_title_tipoDatos">TIPO DE DATOS</string>
    <string name="sql_detail_tipoDatos">Al momento dar tipos de datos a los campos de las tablas se utilizan:\n\n
    Para cadenas de caracteres ---> nvarchar.\n
    Para almacenar un carácter ----> char\n
    Para datos enteros ------> int\n
    Para datos de fecha -----> date\n
    Para datos en decimales -------> decimal</string>
    <string name="sql_title_relaciones">RELACIONES</string>
    <string name="sql_detail_relaciones">Todas las llaves foráneas deben de ser del mismo tipo de dato y longitud que la llave primaria a la que hace referencia.</string>
    <string name="sql_title_Select">SENTENCIA SELECT</string>
    <string name="sql_detail_Select">Permite seleccionar las columnas que se van a mostrar y en el orden en que lo van a hacer. Simplemente es la instrucción que la base de datos interpreta como que vamos a solicitar información.\n\n
    No utiliza “ SELECT * ”\n\n
    Ejemplo Correcto:\n
    SELECT    d.nombre_departamento\n
        , d.locacion\n
    FROM     Departmento AS d\n\n

Esto hace pedir de forma puntal la información, y agiliza el proceso de consulta</string>

    <string name="sql_title_insert">SENTENCA INSERT</string>
    <string name="sql_detail_insert">La sintaxis INSERT para crear un nuevo registro es la siguiente:\n\n

        INSERT INTO NombreTabla [(Campo1, …, CampoN)] VALUES (Valor1, …, ValorN)\n\n

        Ejemplo: INSERT INTO detalle_venta[ código_venta] VALUES (2)</string>

    <string name="sql_title_update">SENTENCIA UPDATE</string>
    <string name="sql_detail_update">La sentencia UPDATE se utiliza para modificar valores en una tabla.\n\n

        La sintaxis de SQL UPDATE es:\n\n

        UPDATE nombre_tabla\n
        SET columna1 = valor1, columna2 = valor2\n
        WHERE columna3 = valor3\n\n

De una manera liviana para poder agilizar la actualización.</string>

    <string name="sql_title_delete"><b>SENTENCIA DELETE</b></string>
    <string name="sql_detail_delete">
        La instrucción DELETE permite eliminar uno o múltiples registros.\n
        Incluso todos los registros de una tabla, dejándola vacía.\n\n
        Su sintaxis es general es:\n\n
        <i>DELETE [FROM] NombreTabla\n
        WHERE Condición</i>\n\n
        La condición, como siempre, define las condiciones que deben cumplir los registros que se desean eliminar.</string>

    // MYSQL
    <string name="mysql_title_MySQL">MySQL</string>
    <string name="mysql_detail_mysql">
        MySQL es el sistema de gestión de bases de datos relacional más extendido en la actualidad
        al estar basada en código abierto. Desarrollado originalmente por MySQL AB, fue adquirida
        por Sun MicroSystems en 2008 y esta su vez comprada por Oracle Corporation en 2010, la cual
        ya era dueña de un motor propio InnoDB para MySQL.\n\n
        MySQL es un sistema de gestión de bases de datos que cuenta con una doble licencia.
        Por una parte, es de código abierto, pero por otra, cuenta con una versión comercial
        gestionada por la compañía Oracle.
    </string>
    <string name="mysql_title_nomenclatura">Convención de Nomenclatura</string>
    <string name="mysql_detail_nomenclatura">
        Reglas Generales\n\n
    Ten en cuenta las siguientes reglas para evitar problemas.\n
    	Utiliza minúsculas ya que le ayuda en la velocidad de la escritura, evitará errores en caso de funciones sensibles a minúsculas y mayúsculas, etc.\n
    	No uses espacios en blanco, use el guion bajo (_) en su lugar.\n
    	No uses números en los nombres, solo caracteres alfabéticos ingleses.\n
    	Utiliza nombres comprensibles válidos.\n
    	Los nombres deben explicarse por sí mismo.\n
    	Los nombres no deben contener más de 64 caracteres.\n
    	Evita usar prefijos.\n
</string>
    <string name="mysql_title_bdatos">Reglas para los nombres de base de datos</string>
    <string name="mysql_detail_bdatos">
        Siga todas las reglas generales anteriores.\n
        El nombre puede ser a la vez singular y plural, pero la base de datos 
        representa una base de datos por lo que debe ser singular en lo posible.\n\n
        Evitar prefijos en lo posible.
    </string>
    <string name="mysql_title_nametablas">Reglas para los nombres de las tablas</string>
    <string name="mysql_detail_nametablas">
        Use minúscula para los nombres de las tablas: MySQL es usualmente alojado en servidores
        Linux, es sensible a mayúsculas por lo que mejor práctica es poner los nombres de las tablas en
        minúsculas.\n\n
        •	Los nombres de las tablas deben ir en singular: la tabla es una sola entidad así como
        lo es el modelo por lo que es extraño tener el nombre de la tabla en plural.\n
        •	Prefijos en el nombre de la tabla: Hemos visto muchas veces que las tablas tienen
        como prefijo el nombre de la base de datos o el nombre del proyecto. Algunas veces
        esto es necesario cuando en nuestro proyecto tenemos muchas bases de datos para
        superar la limitación de algunos proveedores de hosting. Pero si no es necesario
        y nuestro proyecto es pequeño evite usar prefijos.
    </string>
    <string name="mysql_title_namecampos">Nombre de los campos</string>
    <string name="mysql_detail_namecampos">
        Utilice todas las reglas anteriores, es decir, usar minúsculas, no utilizar espacios en blanco, 
        no usar números, y evitar prefijos.\n\n
•	Usa una o dos palabras cortas en lo posible.\n
•	Los nombres de los campos deben ser capaces de entenderse por ejemplo: precio, nombre_empresa, etc.\n
•	Nombre de la columna primaria: La clave principal puede tener el nombre de id o el nombre de la tabla _id. 
        Eso dependerá de la elección.\n
•	Evita el uso de palabras reservadas en los campos: *****, date, etc. 
        En estos casos es preferible usar prefijos como registro_date, etc.\n
•	Evita el uso de nombre de columnas con el mismo nombre de la tabla. 
        Esto puede causar confusión al escribir las consultas.\n
•	Evita nombres en siglas abreviadas o concatenadas
    </string>
    <string name="mysql_title_tipodatos">Tipos de datos adecuados</string>
    <string name="mysql_detail_tiposdatos">
        Usa tipos de datos en base a la naturaleza de los datos. 
        Si utilizas tipos de datos irrelevantes esto puede consumir más espacio o puede dar lugar a errores.\n
        Ejemplo:\n\n
        El uso de varchar(20) para almacenar valores de fecha y hora, en lugar de DATETIME 
        esto puede dar errores durante los cálculos de los tiempos relacionados con la fecha 
        y también es posible en el caso de almacenamiento de datos no válidos.

    </string>
    <string name="mysql_title_usoChar">Uso CHAR sobre VARCHAR </string>
    <string name="mysql_detail_usoChar">
        Si almacenaras una sola cadena de caracteres, utiliza CHAR(1) en lugar de VARCHAR(1) porque
        VARCHAR(1) se llevará un byte adicional para almacenar información. Con lo que tenerlo en
        cuenta a la hora de gestionar estos caracteres.\n\n
     CHAR para datos fijos.\n
     Use datos tipo CHAR para almacenar solo los datos de longitud fija.\n\n
        Ejemplo:\n
        Usando CHAR(1000) en lugar de VARCHAR(1000) consume más espacio si la longitud de los datos es inferior a 1000.
    </string>
    <string name="mysql_title_stopselect">Evite el uso de “SELECT *” en sus consultas</string>
    <string name="mysql_detail_stopselect">
        Como regla general, cuanto más se leen los datos de las tablas, más lento se hace una consulta. 
        Teniendo en cuenta que algunas tablas de producción pueden contener decenas de columnas, algunas 
        de las cuales se compone de grandes tipos de datos, sería imprudente seleccionarlas todas.\n\n
 
        Es un buen hábito especificar las columnas necesarias en su instrucción SELECT
    </string>
    <string name="mysql_title_exist">Use la cláusula "EXISTS" siempre que sea necesario</string>
    <string name="mysql_detail_exist">
        Si desea comprobar la existencia de datos, no utilice:\n
        "If (SELECT count(*) from Table WHERE col='algún valor')>0"\n\n
        A cambio use la cláusula EXISTS:\n\n
        "If EXISTS(SELECT * from Table WHERE col='algún valor')"\n
        Que es más rápido en el tiempo de respuesta.
    </string>
    <string name="mysql_title_insert">INSERT MYSQL</string>
    <string name="mysql_detail_insert">Detalles insert mysql</string>
    <string name="mysql_title_selecfrom">SELEC * FROM </string>
    <string name="mysql_detail_selecfrom">Selec from de una forma basica</string>
    <string name="mysql_title_delete">Sentencia DELETE </string>
    <string name="mysql_detail_delete">DELETE de una forma basica</string>
    <string name="mysql_title_update">SENTENCIA Update </string>
    <string name="mysql_detail_update">update de una forma basica</string>
    <string name="mysql_title_UNO">UNO </string>
    <string name="mysql_detail_UNO">uno</string>
    <string name="mysql_title_DOS"> esto es el DOS</string>
    <string name="mysql_detail_DOS">DOS en un numero positivo</string>

    // POSTGRESQL
    <string name="postgresql_title_definicion"> POSTGRESQL</string>
    <string name="postgresql_detail_definicion">bcibibvivbroiuv</string>

    //MONGO DB
    <string name="mongo_title_Bdd">Base de datos de documentos</string>
    <string name="mongo_detail_Bd">
        Un registro en MongoDB es un documento, que es una estructura de
        datos compuesta por pares de campo y valor. Los documentos MongoDB
        son similares a los objetos JSON. Los valores de los campos pueden
        incluir otros documentos, matrices y matrices de documentos.\n\n

        Las ventajas de usar documentos son:\n\n

        Los documentos corresponden a tipos de datos nativos en muchos lenguajes de programación.\n

        Los documentos y matrices integrados reducen la necesidad de uniones costosas.\n

        El esquema dinámico admite polimorfismo fluido.\n
    </string>
    <string name="mongo_title_colectiones">Colecciones y Vistas</string>
    <string name="mongo_detail_colection">
        MongoDB almacena documentos en colecciones .
        Las colecciones son análogas a las tablas en las bases de datos relacionales.\n\n

        Además de las colecciones, MongoDB admite:\n

        Vistas de solo lectura (a partir de MongoDB 3.4)\n

        Vistas materializadas bajo demanda (a partir de MongoDB 4.2).\n
    </string>
    <string name="mongo_title_coleciones">Colecciones</string>
    <string name="mongo_detail_coleciones">
        MongoDB almacena documentos en colecciones.
        Las colecciones son análogas a las tablas en las bases de datos relacionales\n\n
        Ejemplo:\n\n
        "{
	nombre: "alan",
	edad: 18,
	estado: "D",
	grupos: [ "politica", "noticias" ]
    }"
    </string>
    <string name="mongo_title_creacion">Crear una colección</string>
    <string name="mongo_detail.creacion">
        Si una colección no existe, MongoDB crea la colección cuando almacena datos por primera vez para esa colección.\n\n
        "db.myNewCollection2.insertOne( { x: 1 } )"
        "db.myNewCollection3.createIndex( { y: 1 } )"
        \n\n
        Tanto las insertOne()operaciones como las createIndex()crean su colección respectiva si aún no existen.
        Asegúrese de que el nombre de la colección siga las Restricciones de nombres de MongoDB.\n\n
    </string>
    <string name="mongo_title_Restricciones">Restricciones de nombres</string>
    <string name="mongo_detail_Restriciones">
        Uso de mayúsculas y minúsculas en nombres de bases de datos
        No confíe en mayúsculas y minúsculas para distinguir entre bases de datos.
        Por ejemplo, no puede usar dos bases de datos con nombres como salesDatay SalesData.\n\n

        Después de crear una base de datos en MongoDB, debe usar mayúsculas consistentes
        cuando se refiera a ella. Por ejemplo, si crea la salesDatabase de datos, no se
        refiera a ella usando mayúsculas alternativas como salesdatao SalesData.\n\n

        Restricciones en nombres de bases de datos para Windows
        Para las implementaciones de MongoDB que se ejecutan en Windows,
        los nombres de las bases de datos no pueden contener ninguno de los siguientes caracteres:\n\n
        "/\. " $ * :|?" \n\n
        
        Además, los nombres de las bases de datos no pueden contener el carácter nulo.
    </string>
    <string name="mongo_title_explicita">Creación explícita</string>
    <string name="mongo_detail_explicita">
        MongoDB proporciona el db.createCollection()método para crear explícitamente una
        colección con varias opciones, como establecer el tamaño máximo o las reglas de
        validación de la documentación. Si no está especificando estas opciones, no necesita
        crear explícitamente la colección ya que MongoDB crea nuevas colecciones cuando almacena
        los datos por primera vez para las colecciones.
    </string>
    <string name="mongo_title_validacion">Validación de documentos</string>
    <string name="mongo_detail_validacion">
        Por defecto, una colección no requiere que sus documentos tengan el mismo esquema; 
        es decir, los documentos en una sola colección no necesitan tener el mismo conjunto 
        de campos y el tipo de datos para un campo puede diferir entre los documentos dentro 
        de una colección.\n\n

        Sin embargo, a partir de MongoDB 3.2, puede aplicar reglas de validación de documentos 
        para una colección durante las operaciones de actualización e inserción. Consulte Validación 
        de esquema para obtener más información.
    </string>
    <string name="mongo_title_crearoperaciones">Crear Operaciones</string>
    <string name="mongo_detail_crearoperaciones">
        Las operaciones de creación o inserción añaden nuevos documentos a una colección.
        Si la colección no existe actualmente, las operaciones de inserción crearán la colección.\n\n

        MongoDB proporciona los siguientes métodos para insertar documentos en una colección:\n

        db.collection.insertOne()Nuevo en la versión 3.2\n

        db.collection.insertMany()Nuevo en la versión 3.2\n\n

        En MongoDB, las operaciones de inserción apuntan a una sola colección.
        Todas las operaciones de escritura en MongoDB son atómicas en el nivel de un solo documento.\n\n
        db.users.insertOne( --------- Collecion\n
	{\n
	  nombre: "Zoe",       ---------field:value \n
	  edad: 26,            ---------field:value \n
	  estado: "pending"    ---------field:value \n
	}\n
)\n
    </string>
    <string name="mongo_title_lectura">Operaciones de lectura</string>
    <string name="mongo_detail_lectura">
        Las operaciones de lectura recuperan documentos de una colección;
        es decir, consultar una colección de documentos. MongoDB proporciona
        los siguientes métodos para leer documentos de una colección:\n\n

        "db.collection.find()"\n\n

        Puede especificar filtros de consulta o criterios que identifiquen los documentos a devolver.
    </string>
    <string name="mongo_title_actualizar">Operaciones de actualización</string>
    <string name="mongo_detail_actualizar">
        Las operaciones de actualización modifican los documentos existentes en una colección.
        MongoDB proporciona los siguientes métodos para actualizar documentos de una colección:\n\n

        "db.collection.updateOne()Nuevo en la versión 3.2"\n

        "db.collection.updateMany()Nuevo en la versión 3.2"\n

        "db.collection.replaceOne()Nuevo en la versión 3.2"\n\n

        En MongoDB, las operaciones de actualización tienen como objetivo una sola colección. 
        Todas las operaciones de escritura en MongoDB son atómicas en el nivel de un solo documento.\n

        Puede especificar criterios, o filtros, que identifiquen los documentos para actualizar. 
        Estos filtros utilizan la misma sintaxis que las operaciones de lectura.
    </string>
    <string name="mongo_title_borrar">Borrar Operaciones</string>
    <string name="mongo_detail_borrar">
        Las operaciones de eliminación eliminan documentos de una colección.
        MongoDB proporciona los siguientes métodos para eliminar documentos de una colección:\n\n

        "db.collection.deleteOne()" Nuevo en la versión 3.2\n

        db.collection.deleteMany()" Nuevo en la versión 3.2\n\n

        En MongoDB, las operaciones de eliminación tienen como objetivo una sola colección.
        Todas las operaciones de escritura en MongoDB son atómicas en el nivel de un solo documento.\n

        Puede especificar criterios o filtros que identifiquen los documentos que desea eliminar.
        Estos filtros utilizan la misma sintaxis que las operaciones de lectura.
    </string>





</resources>